cmake_minimum_required( VERSION 3.1 )

project( HoudiniEngineSample )

find_package(DelightNSI REQUIRED)
include_directories(${DELIGHTNSI_INCLUDE_DIR})
link_directories(${DELIGHTNSI_LIBRARY_DIR})

IF(NOT DEFINED ENV{HFS})
    message(FATAL_ERROR "The HFS environment variable must be set to your "
                         "Houdini installation directory to build "
                         "the HoudiniEngineSample.")
ENDIF()

set( HE_SAMPLE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")

set( LIB_SOURCES
    ${HE_SAMPLE_ROOT}/Source/HoudiniApi.cpp
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineGeometry.cpp
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineManager.cpp
    ${HE_SAMPLE_ROOT}/Source/HoudiniEnginePlatform.cpp
    # ${HE_SAMPLE_ROOT}/Source/HoudiniEngineSample.cpp
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineUtility.cpp
)

set( HEADERS
    ${HE_SAMPLE_ROOT}/Source/HoudiniApi.h
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineGeometry.h
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineManager.h
    ${HE_SAMPLE_ROOT}/Source/HoudiniEnginePlatform.h
    ${HE_SAMPLE_ROOT}/Source/HoudiniEngineUtility.h
)

set( FILES
    ${HE_SAMPLE_ROOT}/HDA/hexagona_lite.hda
)

add_library (myhapi SHARED
  ${LIB_SOURCES})

add_executable( ${PROJECT_NAME}
  # ${LIB_SOURCES}
  ${HE_SAMPLE_ROOT}/Source/HoudiniEngineSample.cpp)

target_link_libraries(${PROJECT_NAME}
  myhapi)

if ( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" )
    set( HOUDINI_HAPI_HEADERS "$ENV{HFS}/toolkit/include/" )

    # Setup rpath to locate libHAPIL.so at runtime
    set_target_properties(
        ${PROJECT_NAME}
        PROPERTIES
        INSTALL_RPATH "$ENV{HFS}/dsolib/"
    )
    target_link_libraries( ${PROJECT_NAME} ${CMAKE_DL_LIBS} )

elseif ( ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" )
    set( HOUDINI_HAPI_HEADERS "$ENV{HFS}/toolkit/include/" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17" )

    # Choose the library path to use for rpath.
    # SideFX developer environments (internal) have a different library path
    # than end-user environments.  If the developer library path exists,
    # then use it.  Otherwise, use the end-user library path.
    if ( EXISTS $ENV{HFS}/dsolib )
	# SideFX developer environment library path.
	set( macos_rpath "$ENV{HFS}/dsolib/" )
    else ()
	# End-user environment library path.
	set( macos_rpath "$ENV{HFS}/../Libraries/" )
    endif ()

     # Setup rpath to locate libHAPIL.dylib at runtime
     set_target_properties(
        ${PROJECT_NAME}
        PROPERTIES
        MACOSX_RPATH TRUE
        INSTALL_RPATH "${macos_rpath}"
    )
    # target_link_libraries( ${PROJECT_NAME} ${CMAKE_DL_LIBS} 3delight)
    target_link_libraries( myhapi ${CMAKE_DL_LIBS} 3delight)

elseif ( ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
    set( HOUDINI_HAPI_HEADERS "$ENV{HFS}/toolkit/include/" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17" )

    set_target_properties(
        ${PROJECT_NAME}
        PROPERTIES 
        VS_DEBUGGER_ENVIRONMENT "HFS=$ENV{HFS}"
    )
endif ()

# Include Houdini Engine headers
# target_include_directories( ${PROJECT_NAME} PUBLIC ${HOUDINI_HAPI_HEADERS} )
target_include_directories( myhapi PUBLIC ${HOUDINI_HAPI_HEADERS} )

# Install step
set( CMAKE_INSTALL_PREFIX "${HE_SAMPLE_ROOT}" )

install( TARGETS ${PROJECT_NAME} myhapi DESTINATION "bin" )
install( FILES ${FILES} DESTINATION "bin/HDA" )

# Set the HDA_INSTALL_PATH constant referenced in main()
add_definitions(-DHDA_INSTALL_PATH="${CMAKE_INSTALL_PREFIX}/bin/HDA")
